version: '3.8'
services:
  # mangapark_parser:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: mangapark_parser
  #   restart: always
  #   ports:
  #     - "8080:8080"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     minio:
  #       condition: service_healthy
  #   environment:
  #     DB_URL: postgres://postgres:postgres@postgres:5432/postgres?sslmode=disable
  #     DEBUG: "true"
  #     ENV: "dev"
  #     LOG_LEVEL: "debug"
  #     S3_ENDPOINT: minio:9000
  #     S3_ACCESS_KEY_ID: minioadmin
  #     S3_SECRET_ACCESS_KEY: minioadmin
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '4.0'
  #   networks:
  #     - parser

  postgres:
    image: postgres:latest
    container_name: postgres
    restart: always
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    # healthcheck:
    #   test: ["CMD-SHELL", "pg_isready -h localhost -U postgres || exit 1"]
    #   interval: 5s
    #   timeout: 5s
    #   retries: 5
    #   start_period: 10s
    networks:
      - parser

  pgweb:
    image: sosedoff/pgweb
    container_name: pgwebMP
    restart: always
    depends_on:
      - postgres
    environment:
      PGWEB_DATABASE_URL: "postgres://postgres:postgres@postgres:5432/postgres?sslmode=disable"
    ports:
      - "8081:8081"
    networks:
      - parser

  minio:
    image: quay.io/minio/minio:latest
    container_name: minio
    restart: always
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    # healthcheck:
    #   test: ["CMD-SHELL", "curl -f http://127.0.0.1:9000/minio/health/live || exit 1"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5
    #   start_period: 20s
    # networks:
    #   - parser
    volumes:
      - /mnt/x/docker/s3/mangapark:/data

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    networks:
      - parser

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yaml:/etc/prometheus/prometheus.yml
    ports:
      - '9090:9090'
    networks:
      - parser
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'

volumes:
  pgdata:
  es_data:
  grafana-storage:

networks:
  parser:
    driver: bridge
